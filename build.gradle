buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            url 'http://maven.ferenyr.info/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.7.5"
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'net.minecraftforge.gradle'

    version = project.steamlayer_version
    group = "net.voxelindustry"

    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = targetCompatibility = "1.8"
    compileJava {
        sourceCompatibility = targetCompatibility = "1.8"
    }

    def reobfFile = file("$buildDir/reobfJar/output.jar")
    def reobfArtifact = artifacts.add('default', reobfFile) {
        type 'jar'
        builtBy 'reobfJar'
    }

    repositories {
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${project.forge_version}"

        compileOnly 'org.projectlombok:lombok:1.18.10'

        testCompile 'org.assertj:assertj-core-java8:1.0.0m1'
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.8.47'
    }

    minecraft {
        mappings channel: 'snapshot', version: '20190719-1.14.3'

        runs {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                mods {
                    steamlayer {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                mods {
                    steamlayer {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                args '--mod', 'steamlayer', '--mod', '--output', file('src/generated/resources/')

                mods {
                    steamlayer {
                        source sourceSets.main
                    }
                }
            }
        }
    }
}

project('common') {
    archivesBaseName = "steamlayer-common"

    dependencies {
    }
}

project('inventory') {
    archivesBaseName = "steamlayer-inventory"

    dependencies {
        compile project(':common')
    }
}

project('network') {
    archivesBaseName = "steamlayer-network"

    dependencies {
        compile project(':common')
    }
}

project('container') {
    archivesBaseName = "steamlayer-container"

    dependencies {
        compile project(':inventory')
        compile project(':network')
    }
}

project('tile') {
    archivesBaseName = "steamlayer-tile"

    dependencies {
        compile project(':inventory')
        compile project(':network')
        compile 'org.hjson:hjson:3.0.0'
    }
}

project('multiblock') {
    archivesBaseName = "steamlayer-multiblock"

    dependencies {
        compile project(':tile')
    }
}

project('grid') {
    archivesBaseName = "steamlayer-grid"

    dependencies {
        compile project(':tile')
    }
}

project('recipe') {
    archivesBaseName = "steamlayer-recipe"

    dependencies {
        compile project(':common')
    }
}

project('core') {
    apply plugin: 'com.jfrog.artifactory'

    archivesBaseName = "steamlayer-core"

    dependencies {
        compile project(':container')
        compile project(':tile')
        compile project(':grid')
        compile project(':multiblock')
        compile project(':recipe')
    }

    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = 'voxelindustry'
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications('mavenJava')
            }
        }
    }

    task siblingBuild {
        dependsOn(":common:build")
        dependsOn(":container:build")
        dependsOn(":grid:build")
        dependsOn(":inventory:build")
        dependsOn(":multiblock:build")
        dependsOn(":network:build")
        dependsOn(":recipe:build")
        dependsOn(":tile:build")
        dependsOn(":core:jar")
    }

    task allJar(type: Jar, dependsOn: siblingBuild) {
        baseName = 'allJar'
        from project(':common').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':container').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':grid').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':inventory').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':multiblock').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':network').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':recipe').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':tile').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
        from project(':core').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }

        manifest {
            attributes([
                    "Specification-Title"     : "steamlayer-core",
                    "Specification-Vendor"    : "steamlayer-core",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "voxelindustry",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
        archives allJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId archivesBaseName
                version "${project.steamlayer_version}"
                groupId "net.voxelindustry"

                artifact source: allJar, extension: 'jar'
                artifact source: sourcesJar, classifier: 'sources', extension: 'jar'

                // Allows the maven pom file to be modified.
                pom.withXml {
                    // Go through all the dependencies.
                    asNode().dependencies.dependency.each { dep ->
                        println 'Deleting artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    artifactoryPublish.dependsOn build
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }