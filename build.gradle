plugins {
    id "com.jfrog.artifactory" version "4.24.23"
    id "fabric-loom" version "0.10-SNAPSHOT"
    id "maven-publish"
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    version = project.steamlayer_version
    group = "net.voxelindustry"

    compileJava.options.encoding = 'UTF-8'

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    repositories {
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        mavenCentral()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

        compileOnly 'org.jetbrains:annotations:22.0.0'

        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'

        testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.1')
        testImplementation('org.mockito:mockito-core:4.0.0')
        testImplementation('org.mockito:mockito-junit-jupiter:4.0.0')
        testImplementation('org.assertj:assertj-core:3.21.0')

        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.1')

        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = 'voxelindustry'
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications('mavenJava')
                publishArtifacts = true
                publishPom = true
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(file("${project.buildDir}/libs/${archivesBaseName}-${project.steamlayer_version}.jar")) {
                    builtBy(remapJar)
                }
            }
        }

        repositories {
            mavenLocal()
        }
    }

    tasks.publish.dependsOn build
    artifactoryPublish.dependsOn build
}

archivesBaseName = "steamlayer"

subprojects {
}

project('steamlayer-common') {
    archivesBaseName = "steamlayer-common"

    dependencies {
    }
}

project('steamlayer-test') {
    archivesBaseName = "steamlayer-test"

    dependencies {
        implementation('org.junit.jupiter:junit-jupiter-api:5.6.1')
        implementation('org.mockito:mockito-core:3.3.3')
        implementation('org.mockito:mockito-junit-jupiter:3.3.3')
        implementation('org.assertj:assertj-core:3.15.0')
    }
}

project('steamlayer-inventory') {
    archivesBaseName = "steamlayer-inventory"

    dependencies {
        api project(path: ':steamlayer-common', configuration: 'namedElements')
    }
}

project('steamlayer-network') {
    archivesBaseName = "steamlayer-network"

    dependencies {
        api project(path: ':steamlayer-common', configuration: 'namedElements')
    }
}

project('steamlayer-container') {
    archivesBaseName = "steamlayer-container"

    dependencies {
        api project(path: ':steamlayer-inventory', configuration: 'namedElements')
        api project(path: ':steamlayer-network', configuration: 'namedElements')
    }
}

project('steamlayer-tile') {
    archivesBaseName = "steamlayer-tile"

    dependencies {
        api project(path: ':steamlayer-inventory', configuration: 'namedElements')
        api project(path: ':steamlayer-network', configuration: 'namedElements')
        implementation include('org.hjson:hjson:3.0.0')
    }
}

/*project('multiblock') {
    archivesBaseName = "steamlayer-multiblock"

    dependencies {
        implementation project(':tile')
    }
}*/

project('steamlayer-grid') {
    archivesBaseName = "steamlayer-grid"

    dependencies {
        api project(path: ':steamlayer-tile', configuration: 'namedElements')
    }
}

project('steamlayer-recipe') {
    archivesBaseName = "steamlayer-recipe"

    dependencies {
        api project(path: ':steamlayer-common', configuration: 'namedElements')

        testImplementation project(path: ':steamlayer-test', configuration: 'namedElements')
    }
}

project('steamlayer-math') {
    archivesBaseName = "steamlayer-math"

    dependencies {
        api project(path: ':steamlayer-common', configuration: 'namedElements')

        testImplementation project(path: ':steamlayer-test', configuration: 'namedElements')
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${rootProject.archivesBaseName}-${project.steamlayer_version}.jar")) {
                builtBy(remapJar)
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api it
            include it
        }
    }
}

subprojects.each { artifactoryPublish.dependsOn("${it.name}:artifactoryPublish") }