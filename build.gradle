plugins {
    id "com.jfrog.artifactory" version "4.16.1"
    id "fabric-loom" version "0.4-SNAPSHOT"
    id "maven-publish"
}

apply plugin: 'java-library'
apply plugin: 'com.jfrog.artifactory'

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    version = project.steamlayer_version
    group = "net.voxelindustry"

    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = targetCompatibility = "1.8"
    compileJava {
        sourceCompatibility = targetCompatibility = "1.8"
    }

    repositories {
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testCompile('org.junit.jupiter:junit-jupiter-api:5.6.1')
        testCompile('org.mockito:mockito-core:3.3.3')
        testCompile('org.mockito:mockito-junit-jupiter:3.3.3')
        testCompile('org.assertj:assertj-core:3.15.0')

        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.1')
    }

    processResources {
        inputs.property "version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }
}

archivesBaseName = "steamlayer"

project('common') {
    archivesBaseName = "steamlayer-common"

    dependencies {
    }
}

project('inventory') {
    archivesBaseName = "steamlayer-inventory"

    dependencies {
        compile project(':common')
    }
}

project('network') {
    archivesBaseName = "steamlayer-network"

    dependencies {
        compile project(':common')
    }
}

project('container') {
    archivesBaseName = "steamlayer-container"

    dependencies {
        compile project(':inventory')
        compile project(':network')
    }
}

project('tile') {
    archivesBaseName = "steamlayer-tile"

    dependencies {
        compile project(':inventory')
        compile project(':network')
        compile 'org.hjson:hjson:3.0.0'
    }
}

/*project('multiblock') {
    archivesBaseName = "steamlayer-multiblock"

    dependencies {
        compile project(':tile')
    }
}*/

project('grid') {
    archivesBaseName = "steamlayer-grid"

    dependencies {
        compile project(':tile')
    }
}

project('recipe') {
    archivesBaseName = "steamlayer-recipe"

    dependencies {
        compile project(':common')
    }
}

project('core') {
    archivesBaseName = "steamlayer-core"

    dependencies {
        compile project(':container')
        compile project(':tile')
        compile project(':grid')
        compile project(':recipe')
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'voxelindustry'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true
        }
    }
}

task siblingBuild {
    dependsOn(":common:build")
    dependsOn(":container:build")
    dependsOn(":grid:build")
    dependsOn(":inventory:build")
    dependsOn(":network:build")
    dependsOn(":recipe:build")
    dependsOn(":tile:build")
    // dependsOn(":multiblock:build")
    dependsOn(":core:build")
}

task allJar(type: Jar, dependsOn: siblingBuild) {
    from project(':common').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
    from project(':container').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
    from project(':grid').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
    from project(':inventory').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
/*        from project(':multiblock').configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }*/
    from project(':network').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
    from project(':recipe').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
    from project(':tile').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }
    from project(':core').configurations.archives.allArtifacts.files.collect {
        zipTree(it)
    }

    manifest {
        attributes([
                "Specification-Title"     : "steamlayer-core",
                "Specification-Vendor"    : "steamlayer-core",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "voxelindustry",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${archivesBaseName}-${project.steamlayer_version}.jar")) {
                builtBy(remapJar)
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api it
            include it
        }
    }
}

tasks.publish.dependsOn build
artifactoryPublish.dependsOn build